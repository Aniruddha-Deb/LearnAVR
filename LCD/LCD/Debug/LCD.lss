
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000018a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000963  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ad  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a8  00000000  00000000  00000f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024d  00000000  00000000  00001147  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000172  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a3  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  64:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <flash>:
#define RW_WRITE()    (PORTX &= ~BV(RW))
#define RS_CMD()      (PORTX &= ~BV(RS))
#define RS_DATA()     (PORTX |=  BV(RS))

void flash() {
	ENABLE_HIGH();
  6c:	96 9a       	sbi	0x12, 6	; 18
	asm volatile ("nop");
  6e:	00 00       	nop
	asm volatile ("nop");
  70:	00 00       	nop
	ENABLE_LOW();
  72:	96 98       	cbi	0x12, 6	; 18
  74:	08 95       	ret

00000076 <waitIfBusy>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	83 ef       	ldi	r24, 0xF3	; 243
  78:	91 e0       	ldi	r25, 0x01	; 1
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <waitIfBusy+0x4>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <waitIfBusy+0xa>
  80:	00 00       	nop
  82:	08 95       	ret

00000084 <writeByte>:
// 	RW_WRITE();
// 	DDRX |= BV(D7);
	_delay_ms(2);
}

void writeByte( unsigned char data ) {
  84:	cf 93       	push	r28
  86:	c8 2f       	mov	r28, r24
	char highNibble = data >> 4;
	char lowNibble  = data & 0x0F;
		
	PORTX = (PORTX & 0xF0) | highNibble;
  88:	82 b3       	in	r24, 0x12	; 18
// 	DDRX |= BV(D7);
	_delay_ms(2);
}

void writeByte( unsigned char data ) {
	char highNibble = data >> 4;
  8a:	9c 2f       	mov	r25, r28
  8c:	92 95       	swap	r25
  8e:	9f 70       	andi	r25, 0x0F	; 15
	char lowNibble  = data & 0x0F;
		
	PORTX = (PORTX & 0xF0) | highNibble;
  90:	80 7f       	andi	r24, 0xF0	; 240
  92:	89 2b       	or	r24, r25
  94:	82 bb       	out	0x12, r24	; 18
	flash();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <flash>
	PORTX = (PORTX & 0xF0) | lowNibble;
  9a:	82 b3       	in	r24, 0x12	; 18
	_delay_ms(2);
}

void writeByte( unsigned char data ) {
	char highNibble = data >> 4;
	char lowNibble  = data & 0x0F;
  9c:	cf 70       	andi	r28, 0x0F	; 15
		
	PORTX = (PORTX & 0xF0) | highNibble;
	flash();
	PORTX = (PORTX & 0xF0) | lowNibble;
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	c8 2b       	or	r28, r24
  a2:	c2 bb       	out	0x12, r28	; 18
	flash();
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <flash>
}
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

000000ac <writeCmd>:

void writeCmd( unsigned char cmd ) {
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
	waitIfBusy();
  b0:	0e 94 3b 00 	call	0x76	; 0x76 <waitIfBusy>
	RS_CMD();	
  b4:	94 98       	cbi	0x12, 4	; 18
	writeByte( cmd );
  b6:	8c 2f       	mov	r24, r28
  b8:	0e 94 42 00 	call	0x84	; 0x84 <writeByte>
}
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <writeCmdWithoutBusyChecking>:

void writeCmdWithoutBusyChecking( unsigned char cmd ) {
	RS_CMD();
  c0:	94 98       	cbi	0x12, 4	; 18
	writeByte( cmd );
  c2:	0e 94 42 00 	call	0x84	; 0x84 <writeByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	80 e1       	ldi	r24, 0x10	; 16
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <writeCmdWithoutBusyChecking+0x8>
  cc:	00 c0       	rjmp	.+0      	; 0xce <writeCmdWithoutBusyChecking+0xe>
  ce:	08 95       	ret

000000d0 <write8BitCmd>:
	_delay_us( 50 );
}

void write8BitCmd( unsigned char cmd ) {
	RS_CMD();
  d0:	94 98       	cbi	0x12, 4	; 18
		
	PORTX = (PORTX & 0xF0) | (cmd >> 4);
  d2:	92 b3       	in	r25, 0x12	; 18
  d4:	82 95       	swap	r24
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	98 2b       	or	r25, r24
  dc:	92 bb       	out	0x12, r25	; 18
	flash();
  de:	0e 94 36 00 	call	0x6c	; 0x6c <flash>
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <write8BitCmd+0x14>
  e8:	00 c0       	rjmp	.+0      	; 0xea <write8BitCmd+0x1a>
  ea:	08 95       	ret

000000ec <writeChar>:
	_delay_us( 50 );
}

void writeChar( unsigned char ch ) {
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
	waitIfBusy();
  f0:	0e 94 3b 00 	call	0x76	; 0x76 <waitIfBusy>
	RS_DATA();
  f4:	94 9a       	sbi	0x12, 4	; 18
	writeByte( ch );
  f6:	8c 2f       	mov	r24, r28
  f8:	0e 94 42 00 	call	0x84	; 0x84 <writeByte>
}
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <initLCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	87 e8       	ldi	r24, 0x87	; 135
 102:	93 e1       	ldi	r25, 0x13	; 19
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <initLCD+0x4>
 108:	00 c0       	rjmp	.+0      	; 0x10a <initLCD+0xa>
 10a:	00 00       	nop

void initLCD( void ) {
	
	_delay_ms( 20 );
	write8BitCmd( 0x30 );
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	0e 94 68 00 	call	0xd0	; 0xd0 <write8BitCmd>
 112:	81 ee       	ldi	r24, 0xE1	; 225
 114:	94 e0       	ldi	r25, 0x04	; 4
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <initLCD+0x16>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <initLCD+0x1c>
 11c:	00 00       	nop
	_delay_ms( 5 );
	write8BitCmd( 0x30 );
 11e:	80 e3       	ldi	r24, 0x30	; 48
 120:	0e 94 68 00 	call	0xd0	; 0xd0 <write8BitCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	92 e3       	ldi	r25, 0x32	; 50
 126:	9a 95       	dec	r25
 128:	f1 f7       	brne	.-4      	; 0x126 <initLCD+0x26>
	_delay_us( 150 );
	write8BitCmd( 0x30 );
 12a:	80 e3       	ldi	r24, 0x30	; 48
 12c:	0e 94 68 00 	call	0xd0	; 0xd0 <write8BitCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	81 ee       	ldi	r24, 0xE1	; 225
 132:	94 e0       	ldi	r25, 0x04	; 4
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <initLCD+0x34>
 138:	00 c0       	rjmp	.+0      	; 0x13a <initLCD+0x3a>
 13a:	00 00       	nop
	_delay_ms( 5 );	
	write8BitCmd( 0x20 );
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	0e 94 68 00 	call	0xd0	; 0xd0 <write8BitCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	90 e1       	ldi	r25, 0x10	; 16
 144:	9a 95       	dec	r25
 146:	f1 f7       	brne	.-4      	; 0x144 <initLCD+0x44>
 148:	00 c0       	rjmp	.+0      	; 0x14a <initLCD+0x4a>
	_delay_us( 50 );

	// Look at these!
	writeCmdWithoutBusyChecking( 0b00101000 );
 14a:	88 e2       	ldi	r24, 0x28	; 40
 14c:	0e 94 60 00 	call	0xc0	; 0xc0 <writeCmdWithoutBusyChecking>
	writeCmd( 0b00001000 );
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	0e 94 56 00 	call	0xac	; 0xac <writeCmd>
	writeCmd( 0b00000001 );
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 56 00 	call	0xac	; 0xac <writeCmd>
	writeCmd( 0b00000110 );
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	0e 94 56 00 	call	0xac	; 0xac <writeCmd>
 162:	08 95       	ret

00000164 <main>:
}

int main( void ) {
	
	DDRX = 0xFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	81 bb       	out	0x11, r24	; 17
	
	initLCD();
 168:	0e 94 80 00 	call	0x100	; 0x100 <initLCD>
	writeChar( 0x4E );
 16c:	8e e4       	ldi	r24, 0x4E	; 78
 16e:	0e 94 76 00 	call	0xec	; 0xec <writeChar>
	writeChar( 0x4E );
 172:	8e e4       	ldi	r24, 0x4E	; 78
 174:	0e 94 76 00 	call	0xec	; 0xec <writeChar>
	writeChar( 0x4E );
 178:	8e e4       	ldi	r24, 0x4E	; 78
 17a:	0e 94 76 00 	call	0xec	; 0xec <writeChar>
	writeChar( 0x4E );
 17e:	8e e4       	ldi	r24, 0x4E	; 78
 180:	0e 94 76 00 	call	0xec	; 0xec <writeChar>
 184:	ff cf       	rjmp	.-2      	; 0x184 <main+0x20>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
